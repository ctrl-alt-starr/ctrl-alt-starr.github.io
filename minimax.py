# -*- coding: utf-8 -*-
"""minimax

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oOUBEDZ2-hlbsLKFJtlOoer7B2i2sY6e
"""
import numpy as np

player='x'
opponent='o'
global a

def movesover(board):
  for i in range(0,3):
    for j in range(0,3):
      if(board[i][j]==''):
         return 0
  return 1

def eval(board):
  z=0
  for i in range(0,3):
    for j in range(0,3):
      if board[i][j]=="":
        z=z+1
  if z==9:
    return [0,0,0]
  for i in range(0,3):
    if (board[i][0]==board[i][1]==board[i][2]):
      if board[i][0]==player:return [10,i,'row']
      elif (board[i][0]==opponent): return [-10,i,'row']
    elif (board[0][i]==board[1][i]==board[2][i]):
      if board[0][i]==player:return [10,i,'col']
      elif (board[0][i]==opponent): return [-10,i,'col']
    elif (board[0][0]==board[1][1]==board[2][2]):
      if board[0][0]==player:return [10,i,'dig1']
      elif (board[0][0]==opponent): return [-10,0,'dig1']
    elif (board[0][2]==board[1][1]==board[2][0]):
      if board[2][0]==player:return [10,i,'dig2']
      elif (board[2][0]==opponent): return [-10,0,'dig2']
  return [0,0,0]

def bestmoves(board,max_depth):
  bestval=-1000
  bestmove=[-1,-1]
  for i in range(0,3):
    for j in range(0,3):
      if (board[i][j])=='':
        board[i][j]=player
        moveval=minimax(board,0, False,max_depth)
        #print([i,j])
        #print(moveval)
        board[i][j]=''
        if (moveval>bestval):
          bestval=moveval
          bestmove=[i,j]
  return bestmove

def minimax(board,depth,ismax,max_depth):
                                                            
  #if (board[0][0]=='x' and board[0][1]=='o' and board[0][2]=='x' and board[1][0]=='o' and board[1][1]=='o' and board[1][2]=='x' and board[2][0]=='o' and board[2][1]=='x' and board[2][2]=='o'):
  # if depth==5:
   #  print(eval(board))
    # print(board)
    # print(movesleft(board))
  score=eval(board)[0]
  if movesover(board) : 
    #print("No moves left")
    return 0
  if score==10 : 
    return score-depth
  if score == -10 :
    return score+depth
  if depth==max_depth:
    return score
  if (ismax):
   best=-1000
   for i in range(0,3):
    for j in range(0,3):
      if (board[i][j])=='':
        board[i][j]=player
        best=max(best,minimax(board,depth+1,not (ismax),max_depth)) 
        #if (b==0):
          #print("__________")
          #print("B is zero")
        board[i][j]=''
   return best
  else:
   best=1000
   for i in range(0,3):
    for j in range(0,3):
      if (board[i][j])=='':
        board[i][j]=opponent
        best=min(best,minimax(board,depth+1,not (ismax),max_depth))      
        board[i][j]=''
   return best



